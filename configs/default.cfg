[System]

# CRITICAL=50, # ERROR=40, # WARNING=30,  INFO=20,  DEBUG=10, NOTSET=0
loglevel =  20

# If set to True, also log to file.
log_to_file = True

# Default file to log to, this can be viewed from octoprint
logfile = /home/octo/.octoprint/logs/plugin_redeem.log

# location to look for data files (temperature charts, etc)
data_path = /etc/redeem

# Plugin to load for redeem, comma separated (i.e. HPX2Max,plugin2,plugin3)
plugins =

# Machine type is used by M115
# to identify the machine connected.
machine_type = Unknown

[Geometry]
# 0 - Cartesian
# 1 - H-belt
# 2 - Core XY
# 3 - Delta
axis_config = 0

# The total length each axis can travel
# This affects the homing endstop searching length.
travel_x = 0.2
travel_y = 0.2
travel_z = 0.2
travel_e = 0.2
travel_h = 0.2
travel_a = 0.0
travel_b = 0.0
travel_c = 0.0

# Define the origin in relation to the endstops. 
# The offset that the origin of the build plate has
# from the end stop. 
offset_x = 0.0
offset_y = 0.0
offset_z = 0.0
offset_e = 0.0
offset_h = 0.0
offset_a = 0.0
offset_b = 0.0
offset_c = 0.0


bed_compensation_matrix = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]

[Delta]
# Length of the rod
L   = 0.135
# Radius of the columns
r   = 0.144

# Compensation for positional error of the columns

# Radial offsets of the columns
# Positive values move the tower away from the center of the printer
A_radial = 0.0
B_radial = 0.0
C_radial = 0.0

# Angular offsets of the columns
# Positive values move the tower counter-clockwise, as seen from above
# Specified in degrees 
A_angular = 0.0
B_angular = 0.0
C_angular = 0.0

# Stepper e is ext 1, h is ext 2
[Steppers]

microstepping_x = 3
microstepping_y = 3
microstepping_z = 3
microstepping_e = 3
microstepping_h = 3
microstepping_a = 3
microstepping_b = 3
microstepping_c = 3

current_x = 0.5
current_y = 0.5
current_z = 0.5
current_e = 0.5
current_h = 0.5
current_a = 0.5
current_b = 0.5
current_c = 0.5

# steps per mm:
#   Defined how many stepper full steps needed to move 1mm.
#   Do not factor in microstepping settings.
#   For example: If the axis will travel 10mm in one revolution and
#                angle per step in 1.8deg (200step/rev), steps_pr_mm is 20.
steps_pr_mm_x = 4.0
steps_pr_mm_y = 4.0
steps_pr_mm_z = 50.0
steps_pr_mm_e = 6.0
steps_pr_mm_h = 6.0
steps_pr_mm_a = 6.0
steps_pr_mm_b = 6.0
steps_pr_mm_c = 6.0

backlash_x = 0.0
backlash_y = 0.0
backlash_z = 0.0
backlash_e = 0.0
backlash_h = 0.0
backlash_a = 0.0
backlash_b = 0.0
backlash_c = 0.0


# Which steppers are enabled
in_use_x = True
in_use_y = True
in_use_z = True
in_use_e = True
in_use_h = True
in_use_a = False
in_use_b = False
in_use_c = False

# Set to -1 if axis is inverted
direction_x =  1
direction_y =  1
direction_z =  1
direction_e =  1
direction_h =  1
direction_a =  1
direction_b =  1
direction_c =  1

# Set to True if slow decay mode is needed
slow_decay_x = 0
slow_decay_y = 0
slow_decay_z = 0
slow_decay_e = 0
slow_decay_h = 0
slow_decay_a = 0
slow_decay_b = 0
slow_decay_c = 0


# A stepper controller can operate in slave mode,
# meaning that it will mirror the position of the
# specified stepper. Typically, H will mirror Y or Z,
# in the case of the former, write this: slave_y = H.
slave_x =
slave_y =
slave_z =
slave_e =
slave_h =
slave_a =
slave_b =
slave_c =

# Stepper timout
use_timeout = True
timeout_seconds = 500

[Planner]

# size of the path planning cache
move_cache_size = 1024

# time to wait for buffer to fill, (ms)
print_move_buffer_wait = 250

# total buffered move time should not exceed this much (ms)
max_buffered_move_time = 1000

acceleration_x = 0.5
acceleration_y = 0.5
acceleration_z = 0.5
acceleration_e = 0.5
acceleration_h = 0.5
acceleration_a = 0.5
acceleration_b = 0.5
acceleration_c = 0.5

max_jerk_x = 0.01
max_jerk_y = 0.01
max_jerk_z = 0.01
max_jerk_e = 0.01
max_jerk_h = 0.01
max_jerk_a = 0.01
max_jerk_b = 0.01
max_jerk_c = 0.01

# Max speed for the steppers in m/s
max_speed_x = 0.2
max_speed_y = 0.2
max_speed_z = 0.02
max_speed_e = 0.2
max_speed_h = 0.2
max_speed_a = 0.2
max_speed_b = 0.2
max_speed_c = 0.2

# for arc commands, seperate into segments of length in m
arc_segment_length = 0.001

# When true, movements on the E axis (eg, G1, G92) will apply
# to the active tool (similar to other firmwares).  When false,
# such movements will only apply to the E axis.
e_axis_active = True

[Temperature Control]
# Thermal management is implemented in Redeem through a user configurable network 
# of sensors, heaters and fans. The user specifies the nodes of this network in this 
# section of the configuration file. Each node is a uniquely configured instance 
# from a pre-defined set, all of which are shown below. This approach allows
# for a high degree of flexibility in setting up when fans turn on/off, the
# type of control logic that is used for each heater/fan, and even allowing 
# multiple sensors to control their behaviour. 
#
# allowed types are : alias, difference, maximum, minimum, constant-control, 
#   on-off-control, pid-control, proportional-control, safety, gcode
#
# templates for control units are given below.
#
#[[AliasUnitName]]
#type = alias
#input = <name of temperature sensor>
#
#[[ComparisonUnitName]]
#type = difference, maximum, or minimum
#input_0 = <name of input>
#input_1 = <name of input>
#
#[[ConstantName]]
#type = constant-control
#value = <number in range 0..255>
#output = <name of output>
#
#[[SafetyName]]
#type = safety
#max_rise_rate = <number, deg/sec>
#max_fall_rate = <number, deg/sec>
#min_temp = <number, deg>
#max_temp = <number, deg>
#min_rise_rate = <number, deg/sec>
#min_rise_offset = <number, deg>
#min_rise_delay = <number, sec>
#input = <input sensor name>
#heater = <heater name>
#
#[[OnOffName]]
#type=on-off-control
#target_value = <number>
#on_offset = <number, turn on when value <= target + on_offset>
#off_offset = <number, turn off when value >= target + off_offset>
#on_value = <number in range 0..255>
#off_value = <number in range 0..255>
#sleep = <number, sec, time between control updates>
#output = <output name>
#
#
#[[ProportionalControlName]]
#type = proportional-control
#input = <name of input>
#target_value = <number, desired temperature>
#proportional = <number, multiplier of error>
#max_value = <number in range 0..255>
#min_value = <number in range 0..255>
#ok_range = <number, output=min_value if input is within ok_range of target>
#sleep = <number, sec, time between control updates>
#output = <name of output>
#
#[[PIDControlName]]
#type = pid-control
#input = <name of input>
#target_value =  <number, desired temperature>
#pid_Kp =  <number, proportional constant>
#pid_Ti = <number, integral constant>
#pid_Td = <number, derivative constant>
#ok_range = <number, output=0 if input is within ok_range of target>
#on_off_range = <number, output max_value if input is less than target - on_off_range>
#max_value = <number in range 0..255>
#sleep = <number, sec, time between control updates>
#
#[[CommandName]]
#type = gcode
#command = <G- or M-code/s, multiple codes allowed as a comma separated list>
#output = <output name/s, multiple outputs allowed as a comma separated list>
#
# NOTES:
#   <> when connecting a control unit to a heater or fan the connection may be defined from either unit (input or output).
#   <> 'difference' units return (input_0 - input_1)
#   <> 'gcode' units currently only accept M106 or M107
#   <> in 'safety' units the min_rise_* parameters are used to check for attached/detached/misconnected sensor/heater pairs
#       when power is supplied to the heater, we expect min_rise_rate temperature rise per second, as long as temp is min_rise_offset 
#       below the heaters target temperature and we are min_rise_delay seconds after starting heating.
#   <> multiple safety units may be attached to each heater but each safety can only define one input and one output
#   <> safety inputs must be temperature sensors, or an alias thereof

# Default setting is for all fans to be connected to M106/M107
#  this means that the command 'M106 S255' will turn on all fans full blast
#  to connect only selected fans edit the output list i.e. output = Fan_1
#  Note that individual fan commands, such as 'M106 S255 P1', will always work
#  (depending on the fan controller attached)
[[M106/M107]]
type = gcode
command = M106, M107
output = Fan-0, Fan-1, Fan-2, Fan-3

# default PID control for heaters
[[Control-E]]
type = pid-control
input = Thermistor-E
target_value = 0.0
pid_Kp = 0.1
pid_Ti = 100.0
pid_Td = 0.3
ok_range = 4.0
max_value = 255
sleep = 0.25


[[Control-H]]
type = pid-control
input = Thermistor-H
target_value = 0.0
pid_Kp = 0.1
pid_Ti = 100.0
pid_Td = 0.3
ok_range = 4.0
max_value = 255
sleep = 0.25


[[Control-A]]
type = pid-control
input = Thermistor-A
target_value = 0.0
pid_Kp = 0.1
pid_Ti = 100.0
pid_Td = 0.3
ok_range = 4.0
max_value = 255
sleep = 0.25


[[Control-B]]
type = pid-control
input = Thermistor-B
target_value = 0.0
pid_Kp = 0.1
pid_Ti = 100.0
pid_Td = 0.3
ok_range = 4.0
max_value = 255
sleep = 0.25


[[Control-C]]
type = pid-control
input = Thermistor-C
target_value = 0.0
pid_Kp = 0.1
pid_Ti = 100.0
pid_Td = 0.3
ok_range = 4.0
max_value = 255
sleep = 0.25


[[Control-HBP]]
type = pid-control
input = Thermistor-HBP
target_value = 0.0
pid_Kp = 0.1
pid_Ti = 100.0
pid_Td = 0.3
ok_range = 4.0
max_value = 255
sleep = 0.5

# safety limits for heaters
# multiple safety units may be attached to each heater
# each safety only has one heater
# these allow safety limits to be written for each temperature sensor

[[Safety-E]]
type = safety
max_rise_rate = 10.0
max_fall_rate = 10.0
min_temp = 20.0
max_temp = 250.0
min_rise_rate = 0.1
min_rise_offset = 20
min_rise_delay = 1
input = Thermistor-E
heater = Heater-E

[[Safety-H]]
type = safety
max_rise_rate = 10.0
max_fall_rate = 10.0
min_temp = 20.0
max_temp = 250.0
min_rise_rate = 0.1
min_rise_offset = 20
min_rise_delay = 1
input = Thermistor-H
heater = Heater-H

[[Safety-A]]
type = safety
max_rise_rate = 10.0
max_fall_rate = 10.0
min_temp = 20.0
max_temp = 250.0
min_rise_rate = 0.1
min_rise_offset = 20
min_rise_delay = 1
input = Thermistor-A
heater = Heater-A

[[Safety-B]]
type = safety
max_rise_rate = 10.0
max_fall_rate = 10.0
min_temp = 20.0
max_temp = 250.0
min_rise_rate = 0.1
min_rise_offset = 20
min_rise_delay = 1
input = Thermistor-B
heater = Heater-B

[[Safety-C]]
type = safety
max_rise_rate = 10.0
max_fall_rate = 10.0
min_temp = 20.0
max_temp = 250.0
min_rise_rate = 0.1
min_rise_offset = 20
min_rise_delay = 1
input = Thermistor-C
heater = Heater-C

[[Safety-HBP]]
type = safety
max_rise_rate = 10.0
max_fall_rate = 10.0
min_temp = 20.0
max_temp = 250.0
min_rise_rate = 0.1
min_rise_offset = 20
min_rise_delay = 1
input = Thermistor-HBP
heater = Heater-HBP


[Thermistors]

# Thermistors for measuring temperature
# For list of available temp charts, look in temp_chart.py

[[Thermistor-E]]
sensor = B57560G104F
path_adc = /sys/bus/iio/devices/iio:device0/in_voltage4_raw


[[Thermistor-H]]
sensor = B57560G104F
path_adc = /sys/bus/iio/devices/iio:device0/in_voltage5_raw


[[Thermistor-A]]
sensor = B57560G104F
path_adc = /sys/bus/iio/devices/iio:device0/in_voltage0_raw


[[Thermistor-B]]
sensor = B57560G104F
path_adc = /sys/bus/iio/devices/iio:device0/in_voltage3_raw


[[Thermistor-C]]
sensor = B57560G104F
path_adc = /sys/bus/iio/devices/iio:device0/in_voltage2_raw


[[Thermistor-HBP]]
sensor = B57560G104F
path_adc = /sys/bus/iio/devices/iio:device0/in_voltage6_raw



[Fans]

# control the fans, hook them up to a temperature control unit or simply set
# a constant value. Note that 'channel' is modified on startup according to 
# your Replicape version.

[[Fan-0]]
type = fan
channel = 0
input = 0

[[Fan-1]]
type=fan
channel = 0
input = 0

[[Fan-2]]
type = fan
channel = 0
input = 0

[[Fan-3]]
type = fan
channel = 0
input = 0

[Heaters]

# make things hot, can be connected to control units defined in [Temperature Control]
# can have multiple safety units assigned to one heater i.e. safety = Safety-1, Safety-2

[[Heater-E]]
type = heater
mosfet = 5
prefix = T0
input = Control-E
safety = Safety-E


[[Heater-H]]
type = heater
mosfet = 3
prefix = T1
input = Control-H
safety = Safety-H


[[Heater-A]]
type = heater
mosfet = 11
prefix = T2
input = Control-A
safety = Safety-A


[[Heater-B]]
type = heater
mosfet = 12
prefix = T3
input = Control-B
safety = Safety-B


[[Heater-C]]
type = heater
mosfet = 13
prefix = T4
input = Control-C
safety = Safety-C


[[Heater-HBP]]
type = heater
mosfet = 4
prefix = B
input = Control-HBP
safety = Safety-HBP



[Endstops]
# Which axis should be homed.
has_x = True
has_y = True
has_z = True
has_e = False
has_h = False
has_a = False
has_b = False
has_c = False

inputdev = /dev/input/by-path/platform-ocp:gpio_keys-event

# Number of cycles to wait between checking
# end stops. CPU frequency is 200 MHz
end_stop_delay_cycles = 1000

# Invert =
#   True means endstop is connected as Normally Open (NO) or not connected
#   False means endstop is connected as Normally Closed (NC)
invert_X1 = False
invert_X2 = False
invert_Y1 = False
invert_Y2 = False
invert_Z1 = False
invert_Z2 = False

pin_X1 = GPIO3_21
pin_X2 = GPIO0_30
pin_Y1 = GPIO1_17
pin_Y2 = GPIO3_17
pin_Z1 = GPIO0_31
pin_Z2 = GPIO0_4

# On A4A you'll need pin_Y2 = GPIO1_19

keycode_X1 = 112
keycode_X2 = 113
keycode_Y1 = 114
keycode_Y2 = 115
keycode_Z1 = 116
keycode_Z2 = 117

# If one endstop is hit, which steppers and directions are masked.
#   The list is comma separated and has format
#     x_cw = stepper x clockwise (independent of direction_x)
#     x_ccw = stepper x counter clockwise (independent of direction_x)
#     x_neg = setpper x negative direction (affected by direction_x)
#     x_pos = setpper x positive direction (affected by direction_x)
#   Steppers e and h (and a, b, c for reach) can also be masked.
#
#   For a list of steppers to stop, use this format: x_cw, y_ccw
#   For Simple XYZ bot, the usual practice would be
#     end_stop_X1_stops = x_neg, end_stop_X2_stops = x_pos, ...
#   For CoreXY and similar, two steppers should be stopped if an end stop is hit.
#     similarly for a delta probe should stop x, y and z.
end_stop_X1_stops =
end_stop_Y1_stops =
end_stop_Z1_stops =
end_stop_X2_stops =
end_stop_Y2_stops =
end_stop_Z2_stops =

# if an endstop should only be used for homing or probing, then add it to
# homing_only_endstops in comma separated format.
# Example: homing_only_endstops = Z1, Z2
#   this will make sure that endstop Z1 and Z2 are only used during homing or probing
# NOTE: Be very careful with this option.

homing_only_endstops =

soft_end_stop_min_x = -0.5
soft_end_stop_min_y = -0.5
soft_end_stop_min_z = -0.5
soft_end_stop_min_e = -1000.0
soft_end_stop_min_h = -1000.0
soft_end_stop_min_a = -1000.0
soft_end_stop_min_b = -1000.0
soft_end_stop_min_c = -1000.0

soft_end_stop_max_x = 0.5
soft_end_stop_max_y = 0.5
soft_end_stop_max_z = 0.5
soft_end_stop_max_e = 1000.0
soft_end_stop_max_h = 1000.0
soft_end_stop_max_a = 1000.0
soft_end_stop_max_b = 1000.0
soft_end_stop_max_c = 1000.0

[Homing]

# default G28 homing axes
G28_default_axes = X,Y,Z,E,H,A,B,C

# Homing speed for the steppers in m/s
#   Search to minimum ends by default. Negative value for searching to maximum ends.
home_speed_x = 0.1
home_speed_y = 0.1
home_speed_z = 0.1
home_speed_e = 0.01
home_speed_h = 0.01
home_speed_a = 0.01
home_speed_b = 0.01
home_speed_c = 0.01

# homing backoff speed
home_backoff_speed_x = 0.01
home_backoff_speed_y = 0.01
home_backoff_speed_z = 0.01
home_backoff_speed_e = 0.01
home_backoff_speed_h = 0.01
home_backoff_speed_a = 0.01
home_backoff_speed_b = 0.01
home_backoff_speed_c = 0.01

# homing backoff dist
home_backoff_offset_x = 0.01
home_backoff_offset_y = 0.01
home_backoff_offset_z = 0.01
home_backoff_offset_e = 0.01
home_backoff_offset_h = 0.01
home_backoff_offset_a = 0.01
home_backoff_offset_b = 0.01
home_backoff_offset_c = 0.01

# Where should the printer goes after homing.
# The default is to stay at the offset position.
# This setting is useful if you have a delta printer
# and want it to stay at the top position after homing, instead
# of moving down to the center of the plate.
# In that case, use home_z and set that to the same as the offset values
# for X, Y, and Z, only with different sign.
home_x = 0.0
home_y = 0.0
home_z = 0.0
home_e = 0.0
home_h = 0.0
home_a = 0.0
home_b = 0.0
home_c = 0.0

[Servos]
# Example servo for Rev A4A, connected to channel 14 on the PWM chip
# For Rev B, servo is either P9_14 or P9_16.
# Not enabled for now, just kept here for reference.
# Angle init is the angle the servo is set to when redeem starts.
# pulse min and max is the pulse with for min and max position, as always in SI unit Seconds.
# So 0.001 is 1 ms.
# Angle min and max is what angles those pulses correspond to.
servo_0_enable = False
servo_0_channel = P9_14
servo_0_angle_init = 90
servo_0_angle_min = -90
servo_0_angle_max = 90
servo_0_pulse_min = 0.001
servo_0_pulse_max = 0.002

[Probe]
length = 0.01
speed = 0.05
accel = 0.1
offset_x = 0.0
offset_y = 0.0
offset_z = 0.0

[Rotary-encoders]
enable-e = False
event-e = /dev/input/event1
cpr-e = -360
diameter-e = 0.003

[Filament-sensors]
# If the error is > 1 cm, sound the alarm
alarm-level-e = 0.01

[Watchdog]
enable_watchdog = True

[Alarms]


[Macros]
G29 ="""
    M561                ; Reset the bed level matrix
    M558 P0             ; Set probe type to Servo with switch
    M557 P0 X10 Y20     ; Set probe point 0
    M557 P1 X10 Y180    ; Set probe point 1
    M557 P2 X180 Y100   ; Set probe point 2
    G28 X0 Y0           ; Home X Y

    G28 Z0              ; Home Z
    G0 Z12              ; Move Z up to allow space for probe
    G32                 ; Undock probe
    G92 Z0              ; Reset Z height to 0
    G30 P0 S            ; Probe point 0
    G0 Z0               ; Move the Z up
    G31                 ; Dock probe

    G28 Z0              ; Home Z
    G0 Z12              ; Move Z up to allow space for probe
    G32                 ; Undock probe
    G92 Z0              ; Reset Z height to 0
    G30 P1 S            ; Probe point 1
    G0 Z0               ; Move the Z up
    G31                 ; Dock probe

    G28 Z0              ; Home Z
    G0 Z12              ; Move Z up to allow space for probe
    G32                 ; Undock probe
    G92 Z0              ; Reset Z height to 0
    G30 P2 S            ; Probe point 2
    G0 Z0               ; Move the Z up
    G31                 ; Dock probe

    G28 X0 Y0           ; Home X Y"""

G31 = M280 P0 S320 F3000  ; Probe up (Dock sled)

G32 = M280 P0 S-60 F3000  ; Probe down (Undock sled)


# Configuration for the HPX2Max plugin (if loaded)
[HPX2MaxPlugin]

# The channel on which the servo is connected. The numbering correspond to the Fan number
servo_channel = 1

# Extruder 0 angle to set the servo when extruder 0 is selected, in degree
extruder_0_angle = 20

# Extruder 1 angle to set the servo when extruder 1 is selected, in degree
extruder_1_angle = 175



# Configuration for the Dual extruder by servo plugin
# This config is only used if loaded.
[DualServoPlugin]
# The pin name of where the servo is located
servo_channel = P9_14
pulse_min = 0.001
pulse_max = 0.002
angle_min = -90
angle_max = 90
extruder_0_angle = -5
extruder_1_angle = 5

# Configuration for the UserInterrupt plugin
# This config is only used if loaded.
[UserInterruptPlugin]
# select an end top to use for the button
end_stop_input=Y2
# action can be one of:
#  pausePrint to pause the print, disabling the steppers, and turning the heaters off.
#  restartRedeem to restart the redeem service
#  shutdownOS to halt the OS now
action=pausePrint
# switch_type: NC=Normally Closed; NO=Normally Open
switch_type = NC
